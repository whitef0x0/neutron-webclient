.filter-modal-input-name + .filter-modal-alert {
	display: none
}

.filter-modal-input-name.ng-empty:not(:focus) ~ .filter-modal-alert {
	display: block;
}

.filter-modal-conditions {
	@include flexInline();
	@include flexWrap();
	width: 100%;
}

.filter-modal-condition {
    @include flexInline();
    @include flexFill();
    padding-right: 15px;
    overflow: initial
}

.filter-modal-condition-if {
    @include flexInline();
    @include flexAlignCenter();
    height: 34px;
    padding-right: .5rem;
}

.filter-modal-condition-attachments {
    @include flexInline();
}

.filter-modal-condition-attachments label {
    margin-left: .5rem;
}

.filter-modal-condition-settings {
    @include flexInline();
    @include flexFill();
    @include flexWrap();
    @include flexAlignCenter();
    overflow: initial
}

.filter-modal-add-condition-autocomplete { position: relative }


.filter-modal-simple-condition { width: 100% }
.filter-modal-condition-remove {
	@include flexInline();
	@include flexJustifyEnd();
	flex-basis: 55px;
	order:1;
}

/* badges */
.filter-modal-condition-badges {
	@include flexInline();
	@include flexAlignCenter();
	height: 35px;
}

.filter-modal-condition-or {
	margin:0 .5rem;
	font-size: 75%;
}

/* condition pattern */
.filter-modal-add-condition {
	@include flexInline();
	flex-basis: 15rem;
}
.filter-modal-add-condition-input { width: 12rem }
.filter-modal-add-condition-button {
	margin-left: -4px;
	width: 40px;
	background: $primary;
	border-color: transparent;
	color: $white;
}

.filter-modal-add-condition-button:hover {
	background: $primary;
	border-color: transparent;
	color: $white;
}

.filter-modal-add-condition-button[disabled] {
	background: darken(#f7f7f7, 5);
	border-color: rgba(0,0,0,0.2);
	opacity: 1;
	color: rgba(0,0,0,0.4)
}

/* separator */
.filter-modal-separator {
	@include flexInline();
	@include flexAlignCenter();
	height: 35px;
}


/* Labels */

.filter-modal-label-container {
	@include flexRow();
	@include flexWrap();
}

.filter-modal-label,
.filter-modal-label-add { min-height: 3rem }
.filter-modal-label i { margin: 0.1rem 0.5rem 0.1rem 0 }
.filter-modal-label-add {
	@include flexInline();
	@include flexAlignCenter();
}


/* spacing */
.filter-modal-condition-settings > *,
.filter-modal-condition-remove,
.filter-modal-separator > * { margin:.2rem }

.filter-modal-simple .filter-complex-only  {
        display: none;
}

/* float switching to give each column there own rows doesn't work in flex boxes */
body.appConfigBody-is-mobile .filter-modal-complex {

    .sieve-script {
        flex-direction: column;
    }

    .modal-dialog {
        height: 100%;
        min-height: 700px;
    }

}


.filter-modal-complex {

    .filter-simple-only {
        display: none;
    }

    .modal-dialog,
    .modal-content,
    .modal-body,
    .sieve-script,
    .sieve-script #filterScriptContainer {
        display: flex;
    }

    .modal-dialog,
    .modal-content,
    .modal-body  {
        flex-direction: column;
    }

    .modal-dialog {
        height: calc(100% - 6rem);
        /*
            Needed to make the responsive layout still work
         */
        min-height: 600px;
    }

    .modal-content,
    .modal-body,
    .sieve-script,
    .sieve-script #filterScriptContainer {
        flex-grow: 1;
    }

    .CodeMirror {
        height: 100%;
    }

    /*
     * Get out of the flex chain, we use position: relative instead of height: 100%, because for some reason, height doesn't
     * work on iOS.
     */
    #filterScriptContainer {
        position: relative;
    }

    #filterScript {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

}
